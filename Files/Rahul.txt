
Tailwind CSS home page
v3.4.3
Tailwind CSS v3.4
Dynamic viewport units, :has(), subgrid, and more
Docs
Components
Blog
Showcase
Theme
Tailwind CSS on GitHub
Quick search...
Ctrl K
Documentation
Components
Templates
Screencasts
Playground
Resources
Community
Getting Started
Installation
Editor Setup
Using with Preprocessors
Optimizing for Production
Browser Support
Upgrade Guide
Core Concepts
Utility-First Fundamentals
Hover, Focus, and Other States
Responsive Design
Dark Mode
Reusing Styles
Adding Custom Styles
Functions & Directives
Customization
Configuration
Content
Theme
Screens
Colors
Spacing
Plugins
Presets
Base Styles
Preflight
Layout
Aspect Ratio
Container
Columns
Break After
Break Before
Break Inside
Box Decoration Break
Box Sizing
Display
Floats
Clear
Isolation
Object Fit
Object Position
Overflow
Overscroll Behavior
Position
Top / Right / Bottom / Left
Visibility
Z-Index
Flexbox & Grid
Flex Basis
Flex Direction
Flex Wrap
Flex
Flex Grow
Flex Shrink
Order
Grid Template Columns
Grid Column Start / End
Grid Template Rows
Grid Row Start / End
Grid Auto Flow
Grid Auto Columns
Grid Auto Rows
Gap
Justify Content
Justify Items
Justify Self
Align Content
Align Items
Align Self
Place Content
Place Items
Place Self
Spacing
Padding
Margin
Space Between
Sizing
Width
Min-Width
Max-Width
Height
Min-Height
Max-Height
Size
Typography
Font Family
Font Size
Font Smoothing
Font Style
Font Weight
Font Variant Numeric
Letter Spacing
Line Clamp
Line Height
List Style Image
List Style Position
List Style Type
Text Align
Text Color
Text Decoration
Text Decoration Color
Text Decoration Style
Text Decoration Thickness
Text Underline Offset
Text Transform
Text Overflow
Text Wrap
Text Indent
Vertical Align
Whitespace
Word Break
Hyphens
Content
Backgrounds
Background Attachment
Background Clip
Background Color
Background Origin
Background Position
Background Repeat
Background Size
Background Image
Gradient Color Stops
Borders
Border Radius
Border Width
Border Color
Border Style
Divide Width
Divide Color
Divide Style
Outline Width
Outline Color
Outline Style
Outline Offset
Ring Width
Ring Color
Ring Offset Width
Ring Offset Color
Effects
Box Shadow
Box Shadow Color
Opacity
Mix Blend Mode
Background Blend Mode
Filters
Blur
Brightness
Contrast
Drop Shadow
Grayscale
Hue Rotate
Invert
Saturate
Sepia
Backdrop Blur
Backdrop Brightness
Backdrop Contrast
Backdrop Grayscale
Backdrop Hue Rotate
Backdrop Invert
Backdrop Opacity
Backdrop Saturate
Backdrop Sepia
Tables
Border Collapse
Border Spacing
Table Layout
Caption Side
Transitions & Animation
Transition Property
Transition Duration
Transition Timing Function
Transition Delay
Animation
Transforms
Scale
Rotate
Translate
Skew
Transform Origin
Interactivity
Accent Color
Appearance
Cursor
Caret Color
Pointer Events
Resize
Scroll Behavior
Scroll Margin
Scroll Padding
Scroll Snap Align
Scroll Snap Stop
Scroll Snap Type
Touch Action
User Select
Will Change
SVG
Fill
Stroke
Stroke Width
Accessibility
Screen Readers
Forced Color Adjust
Official Plugins
Typography
Forms
Aspect Ratio
Container Queries
Flexbox & Grid

Flex Wrap
Utilities for controlling how flex items wrap.

​
Quick reference
Class
Properties
flex-wrap	flex-wrap: wrap;
flex-wrap-reverse	flex-wrap: wrap-reverse;
flex-nowrap	flex-wrap: nowrap;
​
Basic usage
​
Don’t wrap
Use flex-nowrap to prevent flex items from wrapping, causing inflexible items to overflow the container if necessary:

01
02
03
<div class="flex flex-nowrap">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
​
Wrap normally
Use flex-wrap to allow flex items to wrap:

01
02
03
<div class="flex flex-wrap">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
​
Wrap reversed
Use flex-wrap-reverse to wrap flex items in the reverse direction:

01
02
03
<div class="flex flex-wrap-reverse">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
​
Applying conditionally
​
Hover, focus, and other states
Tailwind lets you conditionally apply utility classes in different states using variant modifiers. For example, use hover:flex-wrap-reverse to only apply the flex-wrap-reverse utility on hover.

<div class="flex flex-wrap hover:flex-wrap-reverse">
  <!-- ... -->
</div>
For a complete list of all available state modifiers, check out the Hover, Focus, & Other States documentation.

​
Breakpoints and media queries
You can also use variant modifiers to target media queries like responsive breakpoints, dark mode, prefers-reduced-motion, and more. For example, use md:flex-wrap-reverse to apply the flex-wrap-reverse utility at only medium screen sizes and above.

<div class="flex flex-wrap md:flex-wrap-reverse">
  <!-- ... -->
</div>
To learn more, check out the documentation on Responsive Design, Dark Mode and other media query modifiers.

Flex Direction
Flex
Copyright © 2024 Tailwind Labs Inc.

Trademark Policy

Edit this page on GitHub
On this page
Quick reference
Basic usage
Don't wrap
Wrap normally
Wrap reversed
Applying conditionally
Hover, focus, and other states
Breakpoints and media queries
Refactoring UI by Adam Wathan and Steve Schoger
From the creators of Tailwind CSS

Make your ideas look awesome, without relying on a designer.

“This is the survival kit I wish I had when I started building apps.”
Derrick Reimer, SavvyCal
Flex Wrap - Tailwind CSS
